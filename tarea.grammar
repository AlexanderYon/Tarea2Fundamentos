Package tarea;

Helpers
  digit           = ['0' .. '9'];
  not_star        = [[0 .. 0xffff] - '*'];
  not_slash       = [[0 .. 0xffff] - '/'];
  star_not_slash  = '*' not_slash;
  comment_char    = not_star | star_not_slash;
  non_quote       = [[0 .. 0xffff] - '"'];

Tokens
  mult            = '*';
  div             = '/';
  plus            = '+';
  minus           = '-';
  mod             = '%';
  comment         = '/*' comment_char* '*/';
  number          = digit+ | digit+ '.' digit+;
  string_literal  = '"' non_quote* '"';
  int             = 'int';
  double          = 'double';
  string          = 'string';
  double_plus     = '++';
  double_minus    = '--';
  l_par           = '(';
  r_par           = ')';
  not             = '!';
  semicolon       = ';';
  double_equals   = '==';
  equals          = '=';
  less            = '<';
  greater         = '>';
  and             = '&&';
  or              = '||';
  if              = 'if';
  else            = 'else';
  l_brace         = '{';
  r_brace         = '}';
  print           = 'print';
  println         = 'println';
  main            = 'main';
  while           = 'while';
  input           = 'input';
  var             = ['a' .. 'z'] (['a' .. 'z'] | ['0' .. '9'])*;
  blank           = ( ' ' | 13 | 10 )+;

Ignored Tokens
  blank, comment;

Productions  
  program = main l_par r_par l_brace content r_brace;

  content = {content_format} declaration* statement*;
 
  declaration = 
    {int} int var semicolon | 
    {string} string var semicolon | 
    {double} double var semicolon | 
    {int_initialization} int initialization semicolon | 
    {string_initialization} string initialization semicolon | 
    {double_initialization} double initialization semicolon;
  
  statement = 
    {print_expr} print l_par expr r_par semicolon | 
    {print_string} print l_par string_literal r_par semicolon |
    {println_expr} println l_par expr r_par semicolon |
    {println_string} println l_par string_literal r_par semicolon |
    {input} input l_par var r_par semicolon |
    {flow_control} flow_control |
    {initialization} initialization semicolon |
    {increase_var} var double_plus semicolon |
    {decrease_var} var double_minus semicolon;
  
  initialization = {string} var equals string_literal | {expr} var equals expr;
  
  flow_control =
    {if} if l_par condition r_par l_brace statement* r_brace |
    {if_else} if l_par condition r_par l_brace statement* r_brace else_flow_control |
    {while} while l_par condition r_par l_brace statement* r_brace;

  else_flow_control = else l_brace statement* r_brace;
  
  condition = {other} other | {and} condition and other | {or} condition or other;
  
  other = 
    {equals} var double_equals item |
    {not_equals} var not equals item |
    {greater} var greater item |
    {greater_eq} var greater equals item |
    {less} var less item |
    {less_eq} var less equals item |
    {condition} l_par condition r_par;

  item = {expr} expr | {string} string_literal;

  expr = 
    {negative} minus factor |
    {factor} factor | 
    {plus} expr plus factor | 
    {minus} expr minus factor;
  
  factor = 
    {term} term | 
    {mult} factor mult term | 
    {div} factor div term | 
    {mod} factor mod term;

  term = 
    {number} number | 
    {var} var | 
    {expr} l_par expr r_par;