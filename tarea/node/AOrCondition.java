/* This file was generated by SableCC (http://www.sablecc.org/). */

package tarea.node;

import tarea.analysis.*;

@SuppressWarnings("nls")
public final class AOrCondition extends PCondition
{
    private PCondition _condition_;
    private TOr _or_;
    private POther _other_;

    public AOrCondition()
    {
        // Constructor
    }

    public AOrCondition(
        @SuppressWarnings("hiding") PCondition _condition_,
        @SuppressWarnings("hiding") TOr _or_,
        @SuppressWarnings("hiding") POther _other_)
    {
        // Constructor
        setCondition(_condition_);

        setOr(_or_);

        setOther(_other_);

    }

    @Override
    public Object clone()
    {
        return new AOrCondition(
            cloneNode(this._condition_),
            cloneNode(this._or_),
            cloneNode(this._other_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrCondition(this);
    }

    public PCondition getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PCondition node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public TOr getOr()
    {
        return this._or_;
    }

    public void setOr(TOr node)
    {
        if(this._or_ != null)
        {
            this._or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._or_ = node;
    }

    public POther getOther()
    {
        return this._other_;
    }

    public void setOther(POther node)
    {
        if(this._other_ != null)
        {
            this._other_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._other_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condition_)
            + toString(this._or_)
            + toString(this._other_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._or_ == child)
        {
            this._or_ = null;
            return;
        }

        if(this._other_ == child)
        {
            this._other_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condition_ == oldChild)
        {
            setCondition((PCondition) newChild);
            return;
        }

        if(this._or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(this._other_ == oldChild)
        {
            setOther((POther) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
