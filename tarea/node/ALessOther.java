/* This file was generated by SableCC (http://www.sablecc.org/). */

package tarea.node;

import tarea.analysis.*;

@SuppressWarnings("nls")
public final class ALessOther extends POther
{
    private TVar _var_;
    private TLess _less_;
    private PItem _item_;

    public ALessOther()
    {
        // Constructor
    }

    public ALessOther(
        @SuppressWarnings("hiding") TVar _var_,
        @SuppressWarnings("hiding") TLess _less_,
        @SuppressWarnings("hiding") PItem _item_)
    {
        // Constructor
        setVar(_var_);

        setLess(_less_);

        setItem(_item_);

    }

    @Override
    public Object clone()
    {
        return new ALessOther(
            cloneNode(this._var_),
            cloneNode(this._less_),
            cloneNode(this._item_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALessOther(this);
    }

    public TVar getVar()
    {
        return this._var_;
    }

    public void setVar(TVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TLess getLess()
    {
        return this._less_;
    }

    public void setLess(TLess node)
    {
        if(this._less_ != null)
        {
            this._less_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._less_ = node;
    }

    public PItem getItem()
    {
        return this._item_;
    }

    public void setItem(PItem node)
    {
        if(this._item_ != null)
        {
            this._item_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._item_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._less_)
            + toString(this._item_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._less_ == child)
        {
            this._less_ = null;
            return;
        }

        if(this._item_ == child)
        {
            this._item_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((TVar) newChild);
            return;
        }

        if(this._less_ == oldChild)
        {
            setLess((TLess) newChild);
            return;
        }

        if(this._item_ == oldChild)
        {
            setItem((PItem) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
