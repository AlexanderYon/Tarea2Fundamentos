/* This file was generated by SableCC (http://www.sablecc.org/). */

package tarea.analysis;

import tarea.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseADeclarationStatement(ADeclarationStatement node);
    void caseAPrintExprStatement(APrintExprStatement node);
    void caseAPrintStringStatement(APrintStringStatement node);
    void caseAPrintlnExprStatement(APrintlnExprStatement node);
    void caseAPrintlnStringStatement(APrintlnStringStatement node);
    void caseAInputStatement(AInputStatement node);
    void caseAFlowControlStatement(AFlowControlStatement node);
    void caseAInitializationStatement(AInitializationStatement node);
    void caseAIncreaseVarStatement(AIncreaseVarStatement node);
    void caseADecreaseVarStatement(ADecreaseVarStatement node);
    void caseAIntDeclaration(AIntDeclaration node);
    void caseAStringDeclaration(AStringDeclaration node);
    void caseADoubleDeclaration(ADoubleDeclaration node);
    void caseAIntInitializationDeclaration(AIntInitializationDeclaration node);
    void caseAStringInitializationDeclaration(AStringInitializationDeclaration node);
    void caseADoubleInitializationDeclaration(ADoubleInitializationDeclaration node);
    void caseAStringInitialization(AStringInitialization node);
    void caseAExprInitialization(AExprInitialization node);
    void caseAIfFlowControl(AIfFlowControl node);
    void caseAIfElseFlowControl(AIfElseFlowControl node);
    void caseAWhileFlowControl(AWhileFlowControl node);
    void caseAElseFlowControl(AElseFlowControl node);
    void caseAOtherCondition(AOtherCondition node);
    void caseAAndCondition(AAndCondition node);
    void caseAOrCondition(AOrCondition node);
    void caseAEqualsOther(AEqualsOther node);
    void caseANotEqualsOther(ANotEqualsOther node);
    void caseAGreaterOther(AGreaterOther node);
    void caseAGreaterEqOther(AGreaterEqOther node);
    void caseALessOther(ALessOther node);
    void caseALessEqOther(ALessEqOther node);
    void caseAConditionOther(AConditionOther node);
    void caseAExprItem(AExprItem node);
    void caseAStringItem(AStringItem node);
    void caseANegativeExpr(ANegativeExpr node);
    void caseAFactorExpr(AFactorExpr node);
    void caseAPlusExpr(APlusExpr node);
    void caseAMinusExpr(AMinusExpr node);
    void caseATermFactor(ATermFactor node);
    void caseAMultFactor(AMultFactor node);
    void caseADivFactor(ADivFactor node);
    void caseAModFactor(AModFactor node);
    void caseANumberTerm(ANumberTerm node);
    void caseAVarTerm(AVarTerm node);
    void caseAExprTerm(AExprTerm node);

    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMod(TMod node);
    void caseTComment(TComment node);
    void caseTNumber(TNumber node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTInt(TInt node);
    void caseTDouble(TDouble node);
    void caseTString(TString node);
    void caseTDoublePlus(TDoublePlus node);
    void caseTDoubleMinus(TDoubleMinus node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTNot(TNot node);
    void caseTSemicolon(TSemicolon node);
    void caseTDoubleEquals(TDoubleEquals node);
    void caseTEquals(TEquals node);
    void caseTLess(TLess node);
    void caseTGreater(TGreater node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTPrint(TPrint node);
    void caseTPrintln(TPrintln node);
    void caseTMain(TMain node);
    void caseTWhile(TWhile node);
    void caseTInput(TInput node);
    void caseTVar(TVar node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
