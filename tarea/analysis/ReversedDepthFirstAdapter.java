/* This file was generated by SableCC (http://www.sablecc.org/). */

package tarea.analysis;

import java.util.*;
import tarea.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        outAProgram(node);
    }

    public void inADeclarationStatement(ADeclarationStatement node)
    {
        defaultIn(node);
    }

    public void outADeclarationStatement(ADeclarationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationStatement(ADeclarationStatement node)
    {
        inADeclarationStatement(node);
        if(node.getDeclaration() != null)
        {
            node.getDeclaration().apply(this);
        }
        outADeclarationStatement(node);
    }

    public void inAPrintExprStatement(APrintExprStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintExprStatement(APrintExprStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintExprStatement(APrintExprStatement node)
    {
        inAPrintExprStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintExprStatement(node);
    }

    public void inAPrintStringStatement(APrintStringStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStringStatement(APrintStringStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStringStatement(APrintStringStatement node)
    {
        inAPrintStringStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintStringStatement(node);
    }

    public void inAPrintlnExprStatement(APrintlnExprStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintlnExprStatement(APrintlnExprStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnExprStatement(APrintlnExprStatement node)
    {
        inAPrintlnExprStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        outAPrintlnExprStatement(node);
    }

    public void inAPrintlnStringStatement(APrintlnStringStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintlnStringStatement(APrintlnStringStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnStringStatement(APrintlnStringStatement node)
    {
        inAPrintlnStringStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        outAPrintlnStringStatement(node);
    }

    public void inAInputStatement(AInputStatement node)
    {
        defaultIn(node);
    }

    public void outAInputStatement(AInputStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputStatement(AInputStatement node)
    {
        inAInputStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        outAInputStatement(node);
    }

    public void inAFlowControlStatement(AFlowControlStatement node)
    {
        defaultIn(node);
    }

    public void outAFlowControlStatement(AFlowControlStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFlowControlStatement(AFlowControlStatement node)
    {
        inAFlowControlStatement(node);
        if(node.getFlowControl() != null)
        {
            node.getFlowControl().apply(this);
        }
        outAFlowControlStatement(node);
    }

    public void inAInitializationStatement(AInitializationStatement node)
    {
        defaultIn(node);
    }

    public void outAInitializationStatement(AInitializationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializationStatement(AInitializationStatement node)
    {
        inAInitializationStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getInitialization() != null)
        {
            node.getInitialization().apply(this);
        }
        outAInitializationStatement(node);
    }

    public void inAIncreaseVarStatement(AIncreaseVarStatement node)
    {
        defaultIn(node);
    }

    public void outAIncreaseVarStatement(AIncreaseVarStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncreaseVarStatement(AIncreaseVarStatement node)
    {
        inAIncreaseVarStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDoublePlus() != null)
        {
            node.getDoublePlus().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAIncreaseVarStatement(node);
    }

    public void inADecreaseVarStatement(ADecreaseVarStatement node)
    {
        defaultIn(node);
    }

    public void outADecreaseVarStatement(ADecreaseVarStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecreaseVarStatement(ADecreaseVarStatement node)
    {
        inADecreaseVarStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDoubleMinus() != null)
        {
            node.getDoubleMinus().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADecreaseVarStatement(node);
    }

    public void inAIntDeclaration(AIntDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIntDeclaration(AIntDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDeclaration(AIntDeclaration node)
    {
        inAIntDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntDeclaration(node);
    }

    public void inAStringDeclaration(AStringDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStringDeclaration(AStringDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringDeclaration(AStringDeclaration node)
    {
        inAStringDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringDeclaration(node);
    }

    public void inADoubleDeclaration(ADoubleDeclaration node)
    {
        defaultIn(node);
    }

    public void outADoubleDeclaration(ADoubleDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleDeclaration(ADoubleDeclaration node)
    {
        inADoubleDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outADoubleDeclaration(node);
    }

    public void inAIntInitializationDeclaration(AIntInitializationDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIntInitializationDeclaration(AIntInitializationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntInitializationDeclaration(AIntInitializationDeclaration node)
    {
        inAIntInitializationDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getInitialization() != null)
        {
            node.getInitialization().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntInitializationDeclaration(node);
    }

    public void inAStringInitializationDeclaration(AStringInitializationDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStringInitializationDeclaration(AStringInitializationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringInitializationDeclaration(AStringInitializationDeclaration node)
    {
        inAStringInitializationDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getInitialization() != null)
        {
            node.getInitialization().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringInitializationDeclaration(node);
    }

    public void inADoubleInitializationDeclaration(ADoubleInitializationDeclaration node)
    {
        defaultIn(node);
    }

    public void outADoubleInitializationDeclaration(ADoubleInitializationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleInitializationDeclaration(ADoubleInitializationDeclaration node)
    {
        inADoubleInitializationDeclaration(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getInitialization() != null)
        {
            node.getInitialization().apply(this);
        }
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outADoubleInitializationDeclaration(node);
    }

    public void inAStringInitialization(AStringInitialization node)
    {
        defaultIn(node);
    }

    public void outAStringInitialization(AStringInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringInitialization(AStringInitialization node)
    {
        inAStringInitialization(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAStringInitialization(node);
    }

    public void inAExprInitialization(AExprInitialization node)
    {
        defaultIn(node);
    }

    public void outAExprInitialization(AExprInitialization node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprInitialization(AExprInitialization node)
    {
        inAExprInitialization(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAExprInitialization(node);
    }

    public void inAIfFlowControl(AIfFlowControl node)
    {
        defaultIn(node);
    }

    public void outAIfFlowControl(AIfFlowControl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfFlowControl(AIfFlowControl node)
    {
        inAIfFlowControl(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfFlowControl(node);
    }

    public void inAIfElseFlowControl(AIfElseFlowControl node)
    {
        defaultIn(node);
    }

    public void outAIfElseFlowControl(AIfElseFlowControl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseFlowControl(AIfElseFlowControl node)
    {
        inAIfElseFlowControl(node);
        if(node.getElseFlowControl() != null)
        {
            node.getElseFlowControl().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfElseFlowControl(node);
    }

    public void inAWhileFlowControl(AWhileFlowControl node)
    {
        defaultIn(node);
    }

    public void outAWhileFlowControl(AWhileFlowControl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileFlowControl(AWhileFlowControl node)
    {
        inAWhileFlowControl(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileFlowControl(node);
    }

    public void inAElseFlowControl(AElseFlowControl node)
    {
        defaultIn(node);
    }

    public void outAElseFlowControl(AElseFlowControl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseFlowControl(AElseFlowControl node)
    {
        inAElseFlowControl(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseFlowControl(node);
    }

    public void inAOtherCondition(AOtherCondition node)
    {
        defaultIn(node);
    }

    public void outAOtherCondition(AOtherCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherCondition(AOtherCondition node)
    {
        inAOtherCondition(node);
        if(node.getOther() != null)
        {
            node.getOther().apply(this);
        }
        outAOtherCondition(node);
    }

    public void inAAndCondition(AAndCondition node)
    {
        defaultIn(node);
    }

    public void outAAndCondition(AAndCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndCondition(AAndCondition node)
    {
        inAAndCondition(node);
        if(node.getOther() != null)
        {
            node.getOther().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        outAAndCondition(node);
    }

    public void inAOrCondition(AOrCondition node)
    {
        defaultIn(node);
    }

    public void outAOrCondition(AOrCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrCondition(AOrCondition node)
    {
        inAOrCondition(node);
        if(node.getOther() != null)
        {
            node.getOther().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        outAOrCondition(node);
    }

    public void inAEqualsOther(AEqualsOther node)
    {
        defaultIn(node);
    }

    public void outAEqualsOther(AEqualsOther node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsOther(AEqualsOther node)
    {
        inAEqualsOther(node);
        if(node.getItem() != null)
        {
            node.getItem().apply(this);
        }
        if(node.getDoubleEquals() != null)
        {
            node.getDoubleEquals().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAEqualsOther(node);
    }

    public void inANotEqualsOther(ANotEqualsOther node)
    {
        defaultIn(node);
    }

    public void outANotEqualsOther(ANotEqualsOther node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualsOther(ANotEqualsOther node)
    {
        inANotEqualsOther(node);
        if(node.getItem() != null)
        {
            node.getItem().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outANotEqualsOther(node);
    }

    public void inAGreaterOther(AGreaterOther node)
    {
        defaultIn(node);
    }

    public void outAGreaterOther(AGreaterOther node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterOther(AGreaterOther node)
    {
        inAGreaterOther(node);
        if(node.getItem() != null)
        {
            node.getItem().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAGreaterOther(node);
    }

    public void inAGreaterEqOther(AGreaterEqOther node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqOther(AGreaterEqOther node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqOther(AGreaterEqOther node)
    {
        inAGreaterEqOther(node);
        if(node.getItem() != null)
        {
            node.getItem().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAGreaterEqOther(node);
    }

    public void inALessOther(ALessOther node)
    {
        defaultIn(node);
    }

    public void outALessOther(ALessOther node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessOther(ALessOther node)
    {
        inALessOther(node);
        if(node.getItem() != null)
        {
            node.getItem().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outALessOther(node);
    }

    public void inALessEqOther(ALessEqOther node)
    {
        defaultIn(node);
    }

    public void outALessEqOther(ALessEqOther node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqOther(ALessEqOther node)
    {
        inALessEqOther(node);
        if(node.getItem() != null)
        {
            node.getItem().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outALessEqOther(node);
    }

    public void inAConditionOther(AConditionOther node)
    {
        defaultIn(node);
    }

    public void outAConditionOther(AConditionOther node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionOther(AConditionOther node)
    {
        inAConditionOther(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAConditionOther(node);
    }

    public void inAExprItem(AExprItem node)
    {
        defaultIn(node);
    }

    public void outAExprItem(AExprItem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprItem(AExprItem node)
    {
        inAExprItem(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprItem(node);
    }

    public void inAStringItem(AStringItem node)
    {
        defaultIn(node);
    }

    public void outAStringItem(AStringItem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringItem(AStringItem node)
    {
        inAStringItem(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringItem(node);
    }

    public void inANegativeExpr(ANegativeExpr node)
    {
        defaultIn(node);
    }

    public void outANegativeExpr(ANegativeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeExpr(ANegativeExpr node)
    {
        inANegativeExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANegativeExpr(node);
    }

    public void inAFactorExpr(AFactorExpr node)
    {
        defaultIn(node);
    }

    public void outAFactorExpr(AFactorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorExpr(AFactorExpr node)
    {
        inAFactorExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorExpr(node);
    }

    public void inAPlusExpr(APlusExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr(APlusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAPlusExpr(node);
    }

    public void inAMinusExpr(AMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr(AMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAMinusExpr(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inAMultFactor(AMultFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactor(AMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outADivFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAModFactor(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarTerm(node);
    }

    public void inAExprTerm(AExprTerm node)
    {
        defaultIn(node);
    }

    public void outAExprTerm(AExprTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTerm(AExprTerm node)
    {
        inAExprTerm(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAExprTerm(node);
    }
}
